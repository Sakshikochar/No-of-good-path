class UnionSet {
public:
    unordered_map<int, int> parent;
    UnionSet(int n) {
        for (int i = 0; i < n; i++) {
            parent[i] = i;
        }
    }

    int find(int x) {
        while (parent[x] != x) {
            parent[x] = parent[parent[x]];
            x = parent[x];
        }

        return parent[x];
    }

    void Union(int x, int y) {
        int p1 = find(x);
        int p2 = find(y);

        if (p1 != p2) {
            if (p1 < p2) {
                parent[p1] = p2;
            } else {
                parent[p2] = p1;
            }
        }
    }
};

class Solution {
public:
    int numberOfGoodPaths(vector<int>& vals, vector<vector<int>>& edges) {
        map<int, vector<int>> m;
        for (int i = 0; i < vals.size(); i++) {
            m[vals[i]].push_back(i);
        }    

        vector<vector<int>> graph(vals.size());
        for (int i = 0; i < edges.size(); i++) {
            graph[edges[i][0]].push_back(edges[i][1]);
            graph[edges[i][1]].push_back(edges[i][0]);
        }

        UnionSet union_set(vals.size());
        int ans = 0;
        for (auto& iter : m) {
            int v = iter.first;
            vector<int>& nodes = iter.second;

            for (auto& node : nodes) {
                for (auto& neighbor : graph[node]) {
                    if (vals[node] >= vals[neighbor]) {
                        union_set.Union(node, neighbor);
                    }
                }
            }

            unordered_map<int, int> group;
            for (auto& node : nodes) {
                int r = union_set.find(node);
                group[r]++;
            }

            for (auto& iter : group) {
                ans += iter.second * (iter.second + 1) / 2;
            }
        }

        return ans;
    }
};
